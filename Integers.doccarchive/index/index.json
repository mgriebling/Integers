{"includedArchiveIdentifiers":["integers.Integers"],"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/**(_:_:)","title":"static func ** (`Self`, `Self`) -> Integer","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init(_:)-5p6az","title":"init(Int)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:)-9luuz","title":"init(String)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:withbase:)","title":"init(String, withBase: Int)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/integers\/integer\/init(size:digits:negative:)","title":"init(size: Int, digits: Digits, negative: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/abs","title":"var abs: `Self`","type":"property"},{"path":"\/documentation\/integers\/integer\/double","title":"var double: Double","type":"property"},{"path":"\/documentation\/integers\/integer\/integer","title":"var integer: Int","type":"property"},{"path":"\/documentation\/integers\/integer\/isnegative","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/integers\/integer\/ispoweroftwo","title":"var isPowerOfTwo: Bool","type":"property"},{"path":"\/documentation\/integers\/integer\/iszero","title":"var isZero: Bool","type":"property"},{"path":"\/documentation\/integers\/integer\/leadingzerobitcount","title":"var leadingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/integers\/integer\/nonzerobitcount","title":"var nonzeroBitCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/add(_:)","title":"func add(`Self`) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/cmp(_:)","title":"func cmp(`Self`) -> Int","type":"method"},{"path":"\/documentation\/integers\/integer\/description(_:)","title":"func description(Int) -> String","type":"method"},{"path":"\/documentation\/integers\/integer\/factorial()","title":"func factorial() -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/gcd(_:)","title":"func gcd(`Self`) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/invert()","title":"func invert() -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/isprime(accuracy:)","title":"func isPrime(accuracy: UInt) -> Bool","type":"method"},{"path":"\/documentation\/integers\/integer\/lshift(_:)","title":"func lShift(Int) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/lop(_:op:)","title":"func lop(`Self`, op: (Digit, Digit) -> Digit) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/mul(_:)","title":"func mul(`Self`) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/power(_:)","title":"func power(`Self`) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/rshift(_:)","title":"func rShift(Int) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/scaleddouble()","title":"func scaledDouble() -> (x: Double, e: Int)","type":"method"},{"path":"\/documentation\/integers\/integer\/sqr()","title":"func sqr() -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/sqrt()","title":"func sqrt() -> Integer","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/digit","title":"Integer.Digit","type":"typealias"},{"path":"\/documentation\/integers\/integer\/digits","title":"Integer.Digits","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/defaultdigits","title":"static let defaultDigits: Int","type":"property"},{"path":"\/documentation\/integers\/integer\/one","title":"static let one: Integer","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/divrem(_:b:)","title":"static func divRem(`Self`, b: `Self`) -> (div: `Self`, mod: `Self`)","type":"method"},{"path":"\/documentation\/integers\/integer\/fromstring(_:inputbase:)","title":"static func fromString(String, inputBase: Int) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/random(_:)","title":"static func random(ClosedRange<`Self`>) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/random(bits:)","title":"static func random(bits: Int) -> Integer","type":"method"},{"path":"\/documentation\/integers\/integer\/random(digits:)","title":"static func random(digits: Int) -> Integer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/integers\/integer\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/integers\/integer\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/integers\/integer\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/!=(_:_:)-1hxgu","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/!=(_:_:)-6gcs3","title":"static func != <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/&(_:_:)","title":"static func & (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/integers\/integer\/&=(_:_:)","title":"static func &= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/integer\/*(_:_:)","title":"static func * (`Self`, `Self`) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/*=(_:_:)","title":"static func *= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/integer\/+(_:_:)","title":"static func + (`Self`, `Self`) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/-(_:_:)","title":"static func - (`Self`, `Self`) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/==(_:_:)-3o6ri","title":"static func == <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-15p3s","title":"static func ^ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-1p39p","title":"static func > <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-1z5fb","title":"static func \/ (`Self`, `Self`) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-3w0h9","title":"static func % (`Self`, `Self`) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-8q740","title":"static func < <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-cy46","title":"static func | (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-4w78e","title":"static func >= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-6fhz8","title":"static func \/= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-8a2te","title":"static func <= <Other>(Self, Other) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-9cdkn","title":"static func |= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-9gxw","title":"static func %= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-bdxi","title":"static func ^= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/integer\/__(_:_:)-2f7p","title":"static func << <I>(`Self`, I) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/__(_:_:)-46cpz","title":"static func >> <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/integers\/integer\/__(_:_:)-6k564","title":"static func << <RHS>(Self, RHS) -> Self","type":"op"},{"path":"\/documentation\/integers\/integer\/__(_:_:)-bhmp","title":"static func >> <I>(`Self`, I) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/__=(_:_:)-48tjn","title":"static func <<= <I>(inout `Self`, I)","type":"op"},{"path":"\/documentation\/integers\/integer\/__=(_:_:)-92v5l","title":"static func >>= <I>(inout `Self`, I)","type":"op"},{"path":"\/documentation\/integers\/integer\/~(_:)","title":"static func ~ (`Self`) -> Integer","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init()","title":"init()","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:)-2694d","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:)-79q34","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:format:lenient:)-2t6i2","title":"init(String, format: IntegerFormatStyle<Self>, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:format:lenient:)-4wsta","title":"init(String, format: IntegerFormatStyle<Self>.Percent, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:format:lenient:)-8tu0u","title":"init(String, format: IntegerFormatStyle<Self>.Currency, lenient: Bool) throws","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:strategy:)-4cxay","title":"init<S>(S.ParseInput, strategy: S) throws","type":"init"},{"path":"\/documentation\/integers\/integer\/init(_:strategy:)-8vkz9","title":"init<S>(S.ParseInput, strategy: S) throws","type":"init"},{"path":"\/documentation\/integers\/integer\/init(clamping:)","title":"init<T>(clamping: T)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(exactly:)-7j3rx","title":"init?<T>(exactly: T)","type":"init"},{"path":"\/documentation\/integers\/integer\/init(truncatingifneeded:)","title":"init<T>(truncatingIfNeeded: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/bitwidth","title":"var bitWidth: Int","type":"property"},{"path":"\/documentation\/integers\/integer\/trailingzerobitcount","title":"var trailingZeroBitCount: Int","type":"property"},{"path":"\/documentation\/integers\/integer\/words-swift.property","title":"var words: Words","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/advanced(by:)","title":"func advanced(by: Int) -> Self","type":"method"},{"path":"\/documentation\/integers\/integer\/distance(to:)","title":"func distance(to: Self) -> Int","type":"method"},{"path":"\/documentation\/integers\/integer\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/integers\/integer\/formatted(_:)-8ih0m","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/integers\/integer\/formatted(_:)-91ab1","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/integers\/integer\/ismultiple(of:)","title":"func isMultiple(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/integers\/integer\/quotientandremainder(dividingby:)","title":"func quotientAndRemainder(dividingBy: Self) -> (quotient: Self, remainder: Self)","type":"method"},{"path":"\/documentation\/integers\/integer\/signum()","title":"func signum() -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/words-swift.typealias","title":"Integer.Words","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/issigned-6zbyv","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/integers\/integer\/binaryinteger-implementations","title":"BinaryInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/'...(_:)-7su2a","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/integers\/integer\/'...(_:)-9dzr6","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/integers\/integer\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/integers\/integer\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/integers\/integer\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-1xuxc","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-3ummd","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-3y82f","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_(_:_:)-47ae1","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-20ndb","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-63o3e","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-kmd4","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/_=(_:_:)-mele","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/integers\/integer\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/integers\/integer\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/integers\/integer\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/!=(_:_:)-7k4si","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/==(_:_:)-296sg","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/integer\/==(_:_:)-5x385","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/integers\/integer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/integers\/integer\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init(integerliteral:)","title":"init(integerLiteral: StaticBigInt)","type":"init"}],"path":"\/documentation\/integers\/integer\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/integers\/integer\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/integers\/integer\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/init(exactly:)-1r6es","title":"init<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/magnitude","title":"var magnitude: `Self`","type":"property"}],"path":"\/documentation\/integers\/integer\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/issigned-41pot","title":"static var isSigned: Bool","type":"property"}],"path":"\/documentation\/integers\/integer\/signedinteger-implementations","title":"SignedInteger Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/-(_:)-3aa77","title":"static func - (`Self`) -> Integer","type":"op"},{"path":"\/documentation\/integers\/integer\/-(_:)-7s0vb","title":"static func - (Self) -> Self","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/integers\/integer\/negate()","title":"func negate()","type":"method"}],"path":"\/documentation\/integers\/integer\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"}],"path":"\/documentation\/integers\/integer","title":"Integer","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/**(_:_:)","title":"static func ** (`Self`, Integer) -> Rational","type":"op"},{"path":"\/documentation\/integers\/rational\/_(_:_:)-4d0w9","title":"static func \/ (`Self`, `Self`) -> Rational","type":"op"},{"path":"\/documentation\/integers\/rational\/_=(_:_:)-8gwya","title":"static func \/= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/init(_:)-2o03l","title":"init((Integer, Integer))","type":"init"},{"path":"\/documentation\/integers\/rational\/init(_:)-8emii","title":"init(String)","type":"init"},{"path":"\/documentation\/integers\/rational\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/integers\/rational\/init(numerator:denominator:)","title":"init(numerator: Integer, denominator: Integer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/abs","title":"var abs: `Self`","type":"property"},{"path":"\/documentation\/integers\/rational\/negate","title":"var negate: `Self`","type":"property"},{"path":"\/documentation\/integers\/rational\/reciprocal","title":"var reciprocal: `Self`","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/add(_:)","title":"func add(`Self`) -> Rational","type":"method"},{"path":"\/documentation\/integers\/rational\/div(_:)","title":"func div(`Self`) -> Rational","type":"method"},{"path":"\/documentation\/integers\/rational\/isequal(_:)","title":"func isEqual(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/integers\/rational\/islessthan(_:)","title":"func isLessThan(`Self`) -> Bool","type":"method"},{"path":"\/documentation\/integers\/rational\/mul(_:)","title":"func mul(`Self`) -> Rational","type":"method"},{"path":"\/documentation\/integers\/rational\/normalize(_:_:)","title":"func normalize(Integer, Integer) -> Rational","type":"method"},{"path":"\/documentation\/integers\/rational\/power(_:)","title":"func power(Integer) -> Rational","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/+(_:)","title":"static func + (Self) -> Self","type":"op"},{"path":"\/documentation\/integers\/rational\/+(_:_:)","title":"static func + (`Self`, `Self`) -> Rational","type":"op"},{"path":"\/documentation\/integers\/rational\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"},{"path":"\/documentation\/integers\/rational\/-(_:_:)","title":"static func - (`Self`, `Self`) -> Rational","type":"op"},{"path":"\/documentation\/integers\/rational\/-=(_:_:)-5dxe1","title":"static func -= (inout `Self`, `Self`)","type":"op"},{"path":"\/documentation\/integers\/rational\/-=(_:_:)-61c7","title":"static func -= (inout Self, Self)","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/zero","title":"static var zero: Self","type":"property"}],"path":"\/documentation\/integers\/rational\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/'...(_:)-2y7nm","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/integers\/rational\/'...(_:)-7kba9","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/integers\/rational\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/integers\/rational\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/integers\/rational\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/integers\/rational\/_(_:_:)-3u08x","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/rational\/_(_:_:)-551ct","title":"static func < (`Self`, `Self`) -> Bool","type":"op"},{"path":"\/documentation\/integers\/rational\/_=(_:_:)-4laqh","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/rational\/_=(_:_:)-4ukgz","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/integers\/rational\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/integers\/rational\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/integers\/rational\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"}],"path":"\/documentation\/integers\/rational\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/integers\/rational\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/init(integerliteral:)","title":"init(integerLiteral: StaticBigInt)","type":"init"}],"path":"\/documentation\/integers\/rational\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/integers\/rational\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/integers\/rational\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/*(_:_:)","title":"static func * (`Self`, `Self`) -> Rational","type":"op"},{"path":"\/documentation\/integers\/rational\/*=(_:_:)","title":"static func *= (inout `Self`, `Self`)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/init(exactly:)","title":"init<T>(exactly: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/magnitude","title":"var magnitude: `Self`","type":"property"}],"path":"\/documentation\/integers\/rational\/numeric-implementations","title":"Numeric Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/-(_:)-gz9o","title":"static func - (Self) -> Self","type":"op"},{"path":"\/documentation\/integers\/rational\/-(_:)-ob5c","title":"static func - (`Self`) -> Rational","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/integers\/rational\/negate()","title":"func negate()","type":"method"}],"path":"\/documentation\/integers\/rational\/signednumeric-implementations","title":"SignedNumeric Implementations","type":"symbol"}],"path":"\/documentation\/integers\/rational","title":"Rational","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/integers\/**(_:_:)","title":"func ** (Int, Int) -> Integer","type":"op"}],"path":"\/documentation\/integers","title":"Integers","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}